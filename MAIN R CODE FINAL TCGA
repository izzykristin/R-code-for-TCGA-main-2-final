library(edgeR)
library(TCGAbiolinks)


```

# Project set-up and download of LIHC RNAseq data
## Choosing gene expression quantification and LIHC Cancer

```{r}
library(TCGAbiolinks)
library(DESeq2)
library(ggplot2)
library(pheatmap)
library(org.Hs.eg.db)
library(ggplot2)


# Set up the query for LIHC data
query <- GDCquery(project = "TCGA-LIHC", 
                   data.category = "Transcriptome Profiling", 
                   data.type = "Gene Expression Quantification", 
                   experimental.strategy = "RNA-Seq", 
                   workflow.type = "STAR - Counts")
```

```{r}
# Download the data
GDCdownload(query)
data <- GDCprepare(query, save = TRUE, save.filename = "TCGA_LIHC.RData")
```

```{r}
data <- data[data$sample_type %in% c("Primary Tumor", "Solid Tissue Normal"), ]

# Create DESeq object and normalize the data
dds <- DESeqDataSetFromMatrix(countData = assay(data),
                              colData = colData(data),
                              design = ~ sample_type)
dds <- DESeq(dds)

# Perform PCA analysis
#this helps normalise the function through rlogchanges, but vst is a faster transformation than the function rlog()
rld <- vst(dds)
pca <- prcomp(t(assay(rld)))

ggplot(as.data.frame(pca$x), aes(x=PC1, y=PC2, color=colData(rld)$sample_type)) +
  geom_point() +
  xlab(paste0("PC1: ", round(summary(pca)$importance[2,1]*100, 2), "% variance")) +
  ylab(paste0("PC2: ", round(summary(pca)$importance[2,2]*100, 2), "% variance")) +
  ggtitle("PCA of Differentially Expressed Genes by Sample Type")

```


```{r}
# Create heatmap of differentially expressed genes
#This code provides a table with results for the dds differential expression analysis, and allows for it to be transferred to a data frame for heatmap analysis
res <- results(dds)
res.df <- as.data.frame(res)

#This then provides a way to at least create a column name for the gene IDs. Due to some errors, we were unable to import the corresponding gene name to the ENSEMBL ID, however, others may be able to use it for their data
gene_symbols <- select(org.Hs.eg.db, keys = gene_ids, columns = "SYMBOL", keytype = "ENSEMBL")
merged_res <- merge(res.df, gene_symbols, by = "ENSEMBL")

# We can normalise our data further by creating important areas for further analysis, like reducing the pvalue or removing lowly expressed genes with the following code: 
#For example by changing the pvalue for the data, it might be important to change based on how specified you want the data to be 

res05 <- results(dds, alpha=0.05)

#This allows us to plot the heatmap with the top 20 most differentially expressed genes, based on the padjusted value and the pvalue, this could also be done with log2Change
but this seemed to be fine for such a simple project

top_rows <- assay(rld)[order(res$padj, res$pvalue), ][1:20, ]

# Get corresponding ENSEMBL IDs for the top rows
top_ids <- merged_res$ENSEMBL[order(res$padj, res$pvalue)][1:20]

# Get metadata columns for annotation
metadata_cols <- colData(dds)$sample_type
# Set the colors for the heatmap
col_colors <- c("green", "black", "black", "red")

# Generate the heatmap
NMF::aheatmap(top_rows, labRow = top_ids, scale = "row", distfun = "pearson", annCol = metadata_cols, col = col_colors)
```


```{r}
res <- results(dds)
plotCounts(dds, gene=which.min(res$padj), intgroup="sample_type")
```
